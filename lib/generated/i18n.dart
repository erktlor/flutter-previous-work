import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get getStartedButtonLabel => "Get Started";
  String get getStartedBuyButton => "Buy a subscription";
  String get getStartedDescription => "You’re just a few steps away from\nyour private and secure internet life.";
  String get getStartedInvalidDialogDescription => "The email or password you entered is incorrect. Try again or reset your password";
  String get getStartedInvalidDialogTitle => "Invalid Signup";
  String get getStartedInvalidDialogTryAgainBtn => "Try again";
  String get getStartedSelectPlan => "Select a plan";
  String get getStartedSubscriptionDetails => "Payment will be charged to your iTunes account at confirmation of purchase.\nSubscription automatically renews unless renew is turned off at least 24hrs before the end of the current period\nAccount will be charged for renewal within 24hrs prior to the end of the current period, and identify the cost of the renewal.\nAny unused portion of a free trial period, if offered, will be forfeited when the user purchases a subscription to that publication, where applicable\nBy subscribing your agree to our";
  String get getStartedSubscriptionDetailsTitle => "Subscription details";
  String get getStartedSubscriptionFooter => "<a href='https://wevpn.com/en/terms.html'>Terms&nbsp;of&nbsp;Service</a>&nbsp;and&nbsp;<a href='https://wevpn.com/en/privacy_policy.html'>Privacy&nbsp;Policy</a>";
  String get getStartedTitle => "Let’s get you started";
  String get getStartedTos => "<p>By creating an account you agree to our<br/><a href='https://wevpn.com/en/terms.html'>Terms of Service</a> and <a href='https://wevpn.com/en/privacy_policy.html'>Privacy Policy</a></p>";
  String get getStartedWhySubscribe => "Why subscribe?";
  String get getStartedWhySubtitle1 => "10 connections under a single account";
  String get getStartedWhySubtitle2 => "Hundreds of VPN servers worldwide";
  String get getStartedWhySubtitle3 => "Unlimited browsing, streaming & download";
  String get getStartedWhySubtitle4 => "Absolutely no logs of your internet traffic";
  String get getStartedWhyTitle1 => "Protect for all devices";
  String get getStartedWhyTitle2 => "Privacy anywhere, anytime";
  String get getStartedWhyTitle3 => "Safe access to the content you love";
  String get getStartedWhyTitle4 => "Strict No-Logs policy";
  String get invalidLoginDialogDescription => "The email or password you entered is incorrect. Try again or reset your password";
  String get invalidLoginDialogOr => "Or ";
  String get invalidLoginDialogResetPswdBtn => "Reset password";
  String get invalidLoginDialogTitle => "Invalid Login";
  String get invalidLoginDialogTryAgainBtn => "Try again";
  String get labelInvalidEmail => " Invalid Email!";
  String get labelValidEmail => " Valid Email!";
  String get locationPickerAllTitle => "ALL LOCATIONS";
  String get locationPickerBestTitle => "BEST LOCATION";
  String get locationPickerCaption => "Current Location";
  String get locationPickerCaptionBest => " Best Location";
  String get locationPickerLocationsCount => " Server Locations";
  String get locationPickerRecentTitle => "RECENT LOCATIONS";
  String get locationPickerSearchHint => "Search for a country or city";
  String get locationPickerTitle => "Choose a location";
  String get loginBtn => "Login to your account";
  String get loginBuySubscriptionBtn => "Buy a new subscription";
  String get loginForgotPassword => "Forgot Password?";
  String get loginPasswordHint => "Enter password here...";
  String get loginPasswordLabel => "Password";
  String get loginUsernameHint => "e.g johndoe@example.com";
  String get loginUsernameLabel => "Email Address";
  String get onboardingExistingUser => "Existing User?";
  String get onboardingFourSubtitle => "With easy-to-manage, Powerful features";
  String get onboardingFourTitle => "Secure your digital life";
  String get onboardingLogin => "Login";
  String get onboardingOneSubtitle => "If you don’t love it, Cancel anytime";
  String get onboardingOneTitle => "7-day free trial";
  String get onboardingStartTrial => "Start your 7-day FREE trial";
  String get onboardingThreeSubtitle => "We take data security to another level";
  String get onboardingThreeTitle => "Strict No-Logs policy";
  String get onboardingTwoSubtitle => "Pick, Connect and enjoy the best internet";
  String get onboardingTwoTitle => "458+ servers in 24+ countries";
  String get settingsAccount => "ACCOUNT";
  String get settingsAccountEmail => "REGISTERED EMAIL:";
  String get settingsAccountRenews => "RENEWS:";
  String get settingsAccountRenewsDaysLeft => "days left";
  String get settingsAccountSignout => "Sign out";
  String get settingsAccountStatus => "STATUS:";
  String get settingsAccountStatusActive => "Active";
  String get settingsAccountStatusInactive => "Inactive";
  String get settingsGeneral => "GENERAL";
  String get settingsGeneralAppearance => "APPEARANCE";
  String get settingsGeneralAppearanceDark => "Dark Theme";
  String get settingsGeneralAppearanceLight => "Light Theme";
  String get settingsGeneralConnectOnLaunch => "Connect on launch";
  String get settingsGeneralLaunchOnStart => "Launch on system startup";
  String get settingsHelContactUs => "Contact Us!";
  String get settingsHelContactUsURL => "mailto:support@wevpn.com";
  String get settingsHelp => "HELP";
  String get settingsHelpAutoUpdate => "Enable Auto-update";
  String get settingsHelpVersion => "VERSION:";
  String get settingsPrivacy => "PRIVACY";
  String get settingsPrivacyAutoReconnect => "Auto-Reconnect";
  String get settingsPrivacyAutoReconnectSubtitle => "In the event the VPN\nconnection is lost, WeVPN will\nautomatically reconnect.";
  String get settingsPrivacyVPNKill => "VPN Kill";
  String get settingsPrivacyVPNKillSubtitle => "Prevent leaks by blocking\ntraffic outside the VPN";
  String get settingsProtocol => "PROTOCOL";
  String get settingsProtocolAutomatic => "Automatic (Recommended)";
  String get settingsProtocolAutomaticSubtitle => "WeVPN will automatically\nselect the protocol most\nsuitable for you.";
  String get settingsProtocolTCP => "TCP - OpenVPN";
  String get settingsProtocolTCPSubtitle => "Likely to function on all types\nof networks, but might be\nslower than UDP.";
  String get settingsProtocolUDP => "UDP - OpenVPN";
  String get settingsProtocolUDPSubtitle => "Best combination of security\nand speed, but may not work\non the all networks";
  String get settingsTitle => "Settings";
  String get themeChooseTheme => "Choose your theme";
  String get themeContinue => "Apply & Continue";
  String get tooltipClickToConnect => "Click to connect";
  String get tooltipConnected => "Connected!";
  String get tooltipConnecting => "Connecting...";
  String get tooltipDisconnected => "Disconnected!";
  String get tooltipDisconnecting => "Disconnecting...";
  String get vpnProfileContinue => "Continue Configuration";
  String get vpnProfileText => "Allow the app to create VPN profile\non your device to complete\nthe configuration";
  String get vpnProfileTitle => "Set Up VPN Profile";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
